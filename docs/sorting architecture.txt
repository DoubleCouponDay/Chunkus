problem
	I am trying to sort boundary chunks immediately after they get flagged as a boundary but it is not working

guess
	the boundary chunks are sometimes not adjacent to the first or last boundary chunks

try
	build the boundary backwards until it hits the last chunk

	left, top left, top, top right chunks can never be on the boundary

	try to find two adajacent chunks that are boundaries

	bot_left, bot, bot_right, right are possible boundaries

	assume there to be at most 3 boundaries

	if current chunk is adjacent to first and boundary left == 1
		special check for the 2nd chunk to ensure it becomes last and not first

	if less than 2 found
		set last chunks next to current

	if 2 or 3 found
		if this is the first loop, save the chunk furthest away from the last chunk for later

		if 2 found
			set furthest away chunk to next

			set closest chunks next to current chunk

		if 3 found
			set furthest away's chunk's next to second furthest away

			set second furthest away chunk to next

			set closest chunk's next to current

		do not add these boundaries to the shapes boundary list

	in add_chunk_to_boundary, account for special scenario where current chunk is already in a boundary but it still needs to be added to same shape and zipped.

scenario 1
	two shapes are being merged together
	
	the smaller shapes first andl ast boundary chunk are sorted into the larger
	
	the smaller first chunk gets set to the larger last chunks next chunk.
	
	because the shapes are merging, the smaller last chunk doesn not need to be sorted.
	
scenario 2
	a boundary chunk needs to be sorted.
	
	it is not adjacent to first or last boundary chunks.
	
	the adjacent chunks are tested and it is found that bot and right are adjacent.
	
	it is assumed that any chunk in this scenario will be trying to connect with either the first or last chunk depending on which is closer.
	
	a new pixelchunk_list is allocated for the current chunk.
	
	its next is set to bot. the next chunk of the right chunk is set to current chunk.
	
	when the scanline reaches the end of the shape, the current chunk will be adjacent to the last chunk of the shapes boundary. it will finally connect.
	
scenario 3
	a boundary chunk needs to be sorted.
	
	it is not adjacent to first or last boundary chunks.
	
	it is assumed that any chunk in this scenario will be trying to connect with either the first or last chunk depending on which is closer.
	
	the adjacent chunks are tested and it is found that no boundary chunks are adjacent.
	
	the boundary is considered part of a slope, not a staircase.
	
	the distance to first and last boundary chunk is compared and the closest chunk is selected.
	
	the boundary chunk is set to next if it is closer to the last chunk or first if it is closer to the first chunk.
	
scenario 4
	a boundary chunk needs to be sorted.
	
	it is not adjacent to first or last boundary chunks
	
	it is assumed that any chunk in this scenario will be trying to connect with either the first or last chunk depending on which is closer.
	
	the adjacent chunks are tested and it is found that one or no boundary chunks are adjacent.
	
	the boundary is considered part of a slope not a staircase.
	
	the distance to first and last boundary chunk is compared and the closest chunk is selected.
	
	the boundary chunk is set to next if it is closer to the last chunk or first if it is closer to the first chunk.

scenario 5
	a boundary chunk needs to be sorted
	
	it is not adjacent to first or last boundary chunks
	
	the adjacent chunks are tested and it is found that left and bot are adjacent
	
	joining with the scanlined items is preferred so the next property of the currents list is set to left
	
	